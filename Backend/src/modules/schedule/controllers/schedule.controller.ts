import { Response } from 'express';
import { RequestCustom } from '../../../types/express.type';
import * as scheduleService from '../services/schedule.service';
import mongoose from 'mongoose';

export const createSchedule = async (req: RequestCustom, res: Response) => {
    try {
        console.log("Request body:", req.body); // üêû Ki·ªÉm tra d·ªØ li·ªáu g·ª≠i ƒë·∫øn API
        
        // if (!req.body) {
        //     return res.status(400).json({ message: "D·ªØ li·ªáu request b·ªã tr·ªëng!" });
        // }
        //const userId = req.user?._id;

        // if (!userId) {
        //     return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y userId" });
        // }

        const scheduleData = {
            ...req.body,
            //userCreated: userId
        };

        console.log("Final scheduleData before saving:", scheduleData); // üêû Ki·ªÉm tra tr∆∞·ªõc khi l∆∞u
        
        const schedule = await scheduleService.createSchedule(scheduleData);
        res.status(201).json({
            message: 'T·∫°o l·ªãch h·∫πn th√†nh c√¥ng',
            data: schedule
        });
    } catch (error) {
        res.status(500).json({
            message: 'ƒê√£ c√≥ l·ªói x·∫£y ra',
            error
        });
    }

};

// export const createSchedule = async (req: RequestCustom, res: Response) => {
//     try {
//         console.log("Request body received by API:", req.body); // Ki·ªÉm tra request
//         const userId = req.user?._id;

//         if (!userId) {
//             return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y userId" });
//         }

//         const scheduleData = {
//             ...req.body,
//             userCreated: userId
//         };

//         console.log("Final scheduleData before saving:", scheduleData); // Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi l∆∞u

//         const schedule = await scheduleService.createSchedule(scheduleData);
//         res.status(201).json({
//             message: 'T·∫°o l·ªãch h·∫πn th√†nh c√¥ng',
//             data: schedule
//         });
//     } catch (error) {
//         console.error("L·ªói khi t·∫°o l·ªãch:", error);
//         res.status(500).json({
//             message: 'ƒê√£ c√≥ l·ªói x·∫£y ra',
//             error
//         });
//     }
// };


export const getScheduleById = async (req: RequestCustom, res: Response) => {
    try {
        const { id } = req.params;
        const schedule = await scheduleService.getScheduleById(id);
        
        if (!schedule) {
            res.status(404).json({
                message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn'
            });
            return;
        }

        res.status(200).json({
            data: schedule
        });
    } catch (error) {
        res.status(500).json({
            message: 'ƒê√£ c√≥ l·ªói x·∫£y ra',
            error
        });
    }
};

export const getAllSchedules = async (req: RequestCustom, res: Response) => {
    try {
        const schedules = await scheduleService.getAllSchedules();
        res.status(200).json({
            data: schedules
        });
    } catch (error) {
        res.status(500).json({
            message: 'ƒê√£ c√≥ l·ªói x·∫£y ra',
            error
        });
    }
};

export const updateSchedule = async (req: RequestCustom, res: Response) => {
    try {
        const { id } = req.params;
        const schedule = await scheduleService.updateSchedule(id, req.body);
        
        if (!schedule) {
            res.status(404).json({
                message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn'
            });
            return;
        }

        res.status(200).json({
            message: 'C·∫≠p nh·∫≠t l·ªãch h·∫πn th√†nh c√¥ng',
            data: schedule
        });
    } catch (error) {
        res.status(500).json({
            message: 'ƒê√£ c√≥ l·ªói x·∫£y ra',
            error
        });
    }
};

export const deleteSchedule = async (req: RequestCustom, res: Response) => {
    try {
        const { id } = req.params;
        const schedule = await scheduleService.deleteSchedule(id);
        
        if (!schedule) {
            res.status(404).json({
                message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn'
            });
            return;
        }

        res.status(200).json({
            message: 'X√≥a l·ªãch h·∫πn th√†nh c√¥ng'
        });
    } catch (error) {
        res.status(500).json({
            message: 'ƒê√£ c√≥ l·ªói x·∫£y ra',
            error
        });
    }
};

export const joinSchedule = async (req: RequestCustom, res: Response) => {
    try {
        const { id } = req.params;
        const userId = req.user?._id;
        
        if (!userId) {
            res.status(401).json({
                message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng'
            });
            return;
        }
        
        const schedule = await scheduleService.joinSchedule(id, userId);
        
        if (!schedule) {
            res.status(404).json({
                message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn'
            });
            return;
        }

        res.status(200).json({
            message: 'ƒêƒÉng k√Ω tham gia th√†nh c√¥ng',
            data: schedule
        });
    } catch (error) {
        res.status(500).json({
            message: 'ƒê√£ c√≥ l·ªói x·∫£y ra',
            error
        });
    }
};

export const updateJoinStatus = async (req: RequestCustom, res: Response) => {
    try {
        const { id, userId } = req.params;
        const { status } = req.body;
        
        const schedule = await scheduleService.updateJoinStatus(id, new mongoose.Types.ObjectId(userId), status);
        
        if (!schedule) {
            res.status(404).json({
                message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn'
            });
            return;
        }

        res.status(200).json({
            message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i tham gia th√†nh c√¥ng',
            data: schedule
        });
    } catch (error) {
        res.status(500).json({
            message: 'ƒê√£ c√≥ l·ªói x·∫£y ra',
            error
        });
    }
};
